harnessApiVersion: '1.0'
type: SSH
commandUnitType: INSTALL
commandUnits:
- artifactVariableName: artifact
  commandUnitType: DOWNLOAD_ARTIFACT
  deploymentType: SSH
  name: Download Artifact
  scriptType: POWERSHELL
  workingDirectory: ${DownloadDirectory}
- command: |-
    $serviceName="${ServiceName}"
    $releaseId="${serviceVariable.ReleaseNo}"
    $artifactFilename = "${DownloadDirectory}" + "\" + "${artifact.fileName}"
    $appPhysicalDirectory= "${AppPhysicalDirectory}" + "\Artifacts\" + $serviceName + "\release-" + $releaseId

    # Check if artifact is File or Folder structure
    $isFile = Test-Path -Path $artifactFilename -PathType Leaf
    $isFolder = Test-Path -Path $artifactFilename -PathType Container
     if ($isFile -and ([IO.Path]::GetExtension($artifactFilename) -eq ".zip" ))
    {
        Write-Host "Extracting package from" $artifactFilename "to" $appPhysicalDirectory
        Expand-Archive -Path $artifactFilename -DestinationPath $appPhysicalDirectory -Force
    }
    else
    {
        Write-Host "Artifact type is not a zip file. Skipping extract."
    }
    if ($isFolder)
    {
        Write-Host "Copying folder from" $artifactFilename "to" $appPhysicalDirectory
        Copy-Item -Path $artifactFilename -Filter "*.*" -Recurse -Destination $appPhysicalDirectory -Container
    }
    Write-Host "Done."
  commandUnitType: EXEC
  deploymentType: SSH
  name: Expand Artifacts
  scriptType: POWERSHELL
- commandUnitType: COPY_CONFIGS
  deploymentType: SSH
  destinationParentPath: ${DownloadDirectory}
  name: Copy Configs
- command: |-
    $releaseId="${serviceVariable.ReleaseNo}"
    $serviceName="${ServiceName}"
    $appPhysicalDirectory="${AppPhysicalDirectory}" + "\Artifacts\" + $serviceName + "\release-" + $releaseId

    # Copy configs to application directory
    $userProfile = "$env:userprofile"
    Copy-Item -Path "$userProfile\\${app.name}\\${serviceName}\\${env.name}\\runtime\\*.config" -Destination $appPhysicalDirectory -Force

    Import-Module WebAdministration

    $AppPoolName = "${AppPoolName}"
    $AppPoolDotNetVersion = "${AppPoolDotNetVersion}"

    if (!(Test-Path IIS:\AppPools\$AppPoolName -pathType container))
    {
        Write-Host "Creating AppPool:" $AppPoolName
        $appPool = New-Item IIS:\AppPools\$AppPoolName
    }
    else
    {
        Write-Host "Updating AppPool:" $AppPoolName
        $appPool = Get-Item IIS:\AppPools\$AppPoolName
    }

    $appPool | Set-ItemProperty -Name "managedRuntimeVersion" -Value $AppPoolDotNetVersion

    Get-Item IIS:\AppPools\$AppPoolName | ft
    Write-Host "Done."
  commandUnitType: EXEC
  deploymentType: SSH
  name: Create AppPool
  scriptType: POWERSHELL
- command: |-
    Import-Module WebAdministration

    $releaseId="${serviceVariable.ReleaseNo}"
    $SiteName = "${ServiceName}"
    $SitePhysicalDirectory = "${AppPhysicalDirectory}" + "\Artifacts\" + $SiteName + "\release-" + $releaseId
    $AppPoolName = "${AppPoolName}"

    if (!(Test-Path IIS:\Sites\$SiteName -pathType container))
    {
        $site = New-Item IIS:\Sites\$SiteName -physicalPath $sitePhysicalDirectory -bindings @{protocol="${SiteProtocol}";bindingInformation=":"+"${SitePort}"+":"+"${SiteHostName}"} -ApplicationPool $AppPoolName -AutoStart $true
        Write-Host "Created Website:" $SiteName
    }
    else
    {
        $site = Get-Item IIS:\Sites\$SiteName
        $Site | Set-ItemProperty -Name "physicalPath" -Value $sitePhysicalDirectory
        $Site | Set-ItemProperty -Name "bindings" -Value @{protocol="${SiteProtocol}";bindingInformation=":"+"${SitePort}"+":"+"${SiteHostName}"}
        Write-Host "Updated Website:" $SiteName
    }

    Start-WebSite $SiteName
    Get-Item IIS:\Sites\$SiteName
    Write-Host "Done."
  commandUnitType: EXEC
  deploymentType: SSH
  name: Create Website
  scriptType: POWERSHELL
variables:
- description: ReleaseId.
  name: ReleaseNo
- description: Service Name
  name: ServiceName
- description: Default Application Pool
  name: AppPoolName
  value: DefaultAppPool
- description: Application pool DotNet Version
  name: AppPoolDotNetVersion
  value: v4.0
- description: Download Directory
  name: DownloadDirectory
  value: $env:TEMP
- description: App Physical Base Directory
  name: AppPhysicalDirectory
  value: $env:SYSTEMDRIVE
- description: Site Protocol
  name: SiteProtocol
  value: http
- description: Site Port
  name: SitePort
  value: '80'
- description: Site Host Name
  name: SiteHostName
  value: '*'
